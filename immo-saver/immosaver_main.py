# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\immosaver.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import json
from PyQt5.QtWidgets import QLabel
from PyQt5.QtGui import QPixmap
from PyQt5 import QtWebEngineWidgets
import io

from mapgenerator import generateMap,getFileExtension,parseGoogleMapsLinkToLatLon,getTitleFilename
from kleinanzeigen import getInformationenFromKleinanzeigenURL

CONST_INI_FILENAME = 'immo.json'
CONST_ALTERNATIVE_INI_FILENAME = 'immos-template.json'

selected_immo = None

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1434, 941)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1431, 872))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton)
        self.comboBox = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.comboBox.setMinimumSize(QtCore.QSize(500, 0))
        self.comboBox.setObjectName("comboBox")
        self.horizontalLayout_3.addWidget(self.comboBox)
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_3.setMaximumSize(QtCore.QSize(100, 16777215))
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.textEdit = QtWidgets.QTextEdit(self.verticalLayoutWidget)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout_2.addWidget(self.textEdit)
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout_2.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_2.addWidget(self.pushButton_3)
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setMinimumSize(QtCore.QSize(0, 600))
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.image_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.horizontalLayout_2.addWidget(self.image_label)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_2.setObjectName("label_2")
        m = generateMap()

        data = io.BytesIO()
        m.save(data, close_file=False)
        webengine= QtWebEngineWidgets.QWebEngineView()
        webengine.setHtml(data.getvalue().decode())
        webengine.resize(640, 480)
        self.verticalLayout.addWidget(webengine)
        self.verticalLayout.addWidget(self.label_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1434, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        self.load_comboBox_data()  # Load data from JSON file
        self.comboBox.currentTextChanged.connect(self.on_comboBox_changed)
        self.pushButton.clicked.connect(self.on_button_clicked)
        self.pushButton_2.clicked.connect(self.on_kleinanzeigen_button_parse_clicked)
        self.pushButton_3.clicked.connect(self.on_LatLonButton_clicked)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ImmoSaver"))
        self.pushButton.setText(_translate("MainWindow", "PushButton"))
        self.textEdit.setPlaceholderText(_translate("MainWindow", "LINK"))
        self.pushButton_2.setText(_translate("MainWindow", "Parse Kleinanzeigen Link"))
        self.pushButton_3.setText(_translate("MainWindow", "Add LatLon to Immo"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.label_2.setText(_translate("MainWindow", "Kartenansicht"))

    def load_comboBox_data(self):
        """Load data from the JSON file and populate the dropdown with property titles."""
        try:
            with open(CONST_INI_FILENAME, 'r', encoding='utf-8') as file:
                data = json.load(file)
                immos = data.get('immos', [])
                for immo in immos:
                    self.comboBox.addItem(immo['title'], immo)  # Add title to dropdown and store the full object as userData
        except FileNotFoundError:
            print("Error: JSON file not found.")
        except json.JSONDecodeError:
            print("Error: Invalid JSON format.")

    def on_LatLonButton_clicked(self):
        if not selected_immo:
            print("no immo selected")
            return
        url = self.textEdit.toPlainText()
        if url and "google" in url and not "kleinanzeigen" in url:
            lat,lon = parseGoogleMapsLinkToLatLon(url)

            if lat and lon:
                selected_immo['lat'] = lat
                selected_immo['lon'] = lon
                print(selected_immo)
        

    def on_button_clicked(self):
        global selected_immo
        """Handle button click event to display details and image of the selected property."""
        selected_index = self.comboBox.currentIndex()
        selected_immo = self.comboBox.itemData(selected_index)  # Retrieve the full object associated with the selected title

        if selected_immo:
            # Display property details
            details = (
                f"Title: {selected_immo['title']}\n"
                f"Price: {selected_immo['price']} €\n"
                f"City: {selected_immo['city']}\n"
                f"Address: {selected_immo['address']}\n"
                f"Living Area: {selected_immo['livingarea']} m²\n"
                f"Property Area: {selected_immo['propertyarea']} m²\n"
                f"Construction Year: {selected_immo['constructionyear']}\n"
                f"Description: {selected_immo['description']}\n"
                f"Link: {selected_immo['link']}"
            )
            self.label.setText(details)
            self.label_3.setText("ID: "+ str(selected_immo["id"]))
            # Load and display the image
            image_path = f"static/images/.jpg"

            image_path = getTitleFilename(selected_immo)
            pixmap = QPixmap(image_path)
            if not pixmap.isNull():
                #self.image_label.setPixmap(pixmap.scaled(self.image_label.size()))
                self.image_label.setPixmap(pixmap)

            else:
                self.image_label.setText("Image not found.")
        else:
            self.label.setText("No property selected.")
            self.image_label.clear()

    def on_comboBox_changed(self):
        self.on_button_clicked()

    def on_kleinanzeigen_button_parse_clicked(self):
        url = self.textEdit.toPlainText()
        if url:
            getInformationenFromKleinanzeigenURL(url)

        else:
            self.textEdit.setPlaceholderText("Bitte URL der Kleinanzeige eingeben!")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
